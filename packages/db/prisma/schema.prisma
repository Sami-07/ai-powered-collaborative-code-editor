// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id // Using Clerk ID directly as primary key
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ownedRooms    CodeRoom[]     @relation("RoomOwner")
  participantIn Participant[]
  submissions   Submission[]
  sentMessages  ChatMessage[]  @relation("MessageSender")
  receivedMessages ChatMessage[] @relation("MessageRecipient")
}

model CodeRoom {
  id          String        @id @default(uuid())
  name        String
  description String?
  code        String        @default("")
  language    String        @default("javascript")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ownerId     String
  owner       User          @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  participants Participant[]
  submissions Submission[]
  messages    ChatMessage[]
}

model Participant {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      CodeRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Submission {
  id        String   @id @default(uuid())
  code      String
  language  String
  status    String
  stdin     String?
  stdout    String?
  stderr    String?
  time      Int?
  memory    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      CodeRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("submissions")
}

model ChatMessage {
  id           String   @id @default(uuid())
  content      String
  type         String   // 'message', 'private_message', 'join', 'leave', etc.
  timestamp    DateTime @default(now())
  roomId       String?
  room         CodeRoom? @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId     String
  sender       User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderName   String
  recipientId  String?
  recipient    User?    @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: SetNull)
  
  @@index([roomId])
  @@index([senderId])
  @@index([recipientId])
  @@index([timestamp])
}
